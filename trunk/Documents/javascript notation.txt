// Testing the type of various variables.
var myFunction = function() {
console.log( "hello" );
};
var myObject = {
foo: "bar"
};
var myArray = [ "a", "b", "c" ];
var myString = "hello";
var myNumber = 3;
typeof myFunction; // "function"
typeof myObject; // "object"
typeof myArray; // "object" -- Careful!
typeof myString; // "string"
typeof myNumber; // "number"
typeof null; // "object" -- Careful!
if ( myArray.push && myArray.slice && myArray.join ) {
// probably an array (this is called "duck typing")
}
if ( Object.prototype.toString.call( myArray ) === "[object Array]" ) {
// Definitely an array!
// This is widely considered as the most robust way
// to determine if a specific value is an Array.
}

$( document ).ready() will only run once the page Document Object Model (DOM) is ready for JavaScript code to execute. Code included inside $( window ).load(function() { ... }) will run once the entire page (images or iframes), not just the DOM, is ready. 

.attr()
setter
$( "a" ).attr( "href", "allMyHrefsAreTheSameNow.html" );
$( "a" ).attr({
	title: "all titles are the same too!",
	href: "somethingNew.html"
});

getter
$( "a" ).attr( "href" );


// Doesn't work!
if ( $( "div.foo" ) ) {
...
}
This won't work. When a selection is made using $(), an object is always returned, and objects always evaluate to true. Even if the selection doesn't contain any elements, the code inside the if statement will still run. 

jQuery also provides the .end() method to get back to the original selection should you change the selection in the middle of a chain: 
$( "#content" )
.find( "h3" )
.eq( 2 )
.html( "new text for the third h3!" )
.end() // Restores the selection to all h3s in #content
.eq( 0 )
.html( "new text for the first h3!" );



    .html() – Get or set the HTML contents.
    .text() – Get or set the text contents; HTML will be stripped.
    .attr() – Get or set the value of the provided attribute.
    .width() – Get or set the width in pixels of the first element in the selection as an integer.
    .height() – Get or set the height in pixels of the first element in the selection as an integer.
    .position() – Get an object with position information for the first element in the selection, relative to its first positioned ancestor. This is a getter only.
    .val() – Get or set the value of form elements.

	
	
	Creating New Elements
	// Creating a new element with an attribute object.
$( "<a/>", {
html: "This is a <strong>new</strong> link",
"class": "new",
href: "foo.html"
});


var myItems = [];
var $myList = $( "#myList" );
for ( var i = 0; i < 100; i++ ) {
myItems.push( "<li>item " + i + "</li>" );
}
$myList.append( myItems.join( "" ) );



// Using a function to determine an attribute's new value.
$( "#myDiv a:first" ).attr({
rel: "super-special",
href: function( idx, href ) {
return "/new/" + href;
}
});
$( "#myDiv a:first" ).attr( "href", function( idx, href ) {
return "/new/" + href;
});


Data Methods

There's often data about an element you want to store with the element. In plain JavaScript, you might do this by adding a property to the DOM element, but you'd have to deal with memory leaks in some browsers. jQuery offers a straightforward way to store data related to an element, and it manages the memory issues for you. 
// Storing and retrieving data related to an element.
$( "#myDiv" ).data( "keyName", { foo: "bar" } );
$( "#myDiv" ).data( "keyName" ); // Returns { foo: "bar" }




Data Methods
For example, you may want to establish a relationship between a list item and a <div> that's inside of it. This relationship could be established every single time the list item is touched, but a better solution would be to establish the relationship once, then store a pointer to the <div> on the list item using .data(): 

// Storing a relationship between elements using .data()
$( "#myList li" ).each(function() {
var $li = $( this );
var $div = $li.find( "div.content" );
$li.data( "contentDiv", $div );
});
// Later, we don't have to find the div again;
// we can just read it from the list item's data
var $firstLi = $( "#myList li:first" );
$firstLi.data( "contentDiv" ).html( "new content" );
In addition to passing .data() a single key-value pair to store data, you can also pass an object containing one or more pairs. 